; XFAIL: *
; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes='require<loops>,newgvn' -S | FileCheck %s
; This test is checking that (a) this doesn't crash, and (b) we don't
; conclude the value of %tmp17 is available in bb1.bb15_crit_edge.
; rdar://9429882

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-apple-macosx10.7.0"
define i1 @rb_intern(ptr %foo) nounwind ssp {
; CHECK-LABEL: define i1 @rb_intern(
; CHECK-SAME: ptr [[FOO:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr null, ptr [[TMP]], align 8
; CHECK-NEXT:    store i8 undef, ptr null, align 536870912
; CHECK-NEXT:    br label [[BB1:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    [[TMP11:%.*]] = phi ptr [ [[TMP14:%.*]], [[BB10:%.*]] ], [ null, [[BB:%.*]] ]
; CHECK-NEXT:    br i1 undef, label [[BB3:%.*]], label [[BB1_BB15_CRIT_EDGE:%.*]]
; CHECK:       bb1.bb15_crit_edge:
; CHECK-NEXT:    [[TMP17_PRE:%.*]] = load i8, ptr [[TMP11]], align 1
; CHECK-NEXT:    br label [[BB15:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    call void @isalnum()
; CHECK-NEXT:    br i1 undef, label [[BB3_BB10_CRIT_EDGE:%.*]], label [[BB5:%.*]]
; CHECK:       bb3.bb10_crit_edge:
; CHECK-NEXT:    [[TMP12_PRE:%.*]] = load i8, ptr [[TMP11]], align 1
; CHECK-NEXT:    br label [[BB10]]
; CHECK:       bb5:
; CHECK-NEXT:    [[TMP12_PRE3:%.*]] = load i8, ptr [[TMP11]], align 1
; CHECK-NEXT:    br i1 undef, label [[BB10]], label [[BB6:%.*]]
; CHECK:       bb6:
; CHECK-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP12_PRE3]] to i64
; CHECK-NEXT:    br i1 undef, label [[BB15SPLIT:%.*]], label [[BB10]]
; CHECK:       bb10:
; CHECK-NEXT:    [[TMP12:%.*]] = phi i8 [ [[TMP12_PRE]], [[BB3_BB10_CRIT_EDGE]] ], [ [[TMP12_PRE3]], [[BB6]] ], [ [[TMP12_PRE3]], [[BB5]] ]
; CHECK-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP12]] to i64
; CHECK-NEXT:    [[TMP14]] = getelementptr inbounds i8, ptr [[FOO]], i64 undef
; CHECK-NEXT:    store ptr [[TMP14]], ptr [[TMP]], align 8
; CHECK-NEXT:    br label [[BB1]]
; CHECK:       bb15split:
; CHECK-NEXT:    br label [[BB15]]
; CHECK:       bb15:
; CHECK-NEXT:    [[TMP17:%.*]] = phi i8 [ [[TMP12_PRE3]], [[BB15SPLIT]] ], [ [[TMP17_PRE]], [[BB1_BB15_CRIT_EDGE]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = icmp eq i8 [[TMP17]], 0
; CHECK-NEXT:    ret i1 [[TMP18]]
;

bb:
  %tmp = alloca ptr, align 8
  store ptr null, ptr %tmp, align 8
  store i8 undef, ptr null, align 536870912
  br label %bb1

bb1:
  br i1 undef, label %bb3, label %bb15



bb3:
  call void @isalnum()
  br i1 undef, label %bb10, label %bb5

bb5:
  br i1 undef, label %bb10, label %bb6

bb6:
  %tmp7 = load ptr, ptr %tmp, align 8
  %tmp8 = load i8, ptr %tmp7, align 1
  %tmp9 = zext i8 %tmp8 to i64
  br i1 undef, label %bb15, label %bb10

bb10:
  %tmp11 = load ptr, ptr %tmp, align 8
  %tmp12 = load i8, ptr %tmp11, align 1
  %tmp13 = zext i8 %tmp12 to i64
  %tmp14 = getelementptr inbounds i8, ptr %foo, i64 undef
  store ptr %tmp14, ptr %tmp, align 8
  br label %bb1

bb15:
  %tmp16 = load ptr, ptr %tmp, align 8
  %tmp17 = load i8, ptr %tmp16, align 1
  %tmp18 = icmp eq i8 %tmp17, 0
  br label %bb19




bb19:                                             ; preds = %bb15
  ret i1 %tmp18
}

declare void @isalnum() nounwind inlinehint ssp
