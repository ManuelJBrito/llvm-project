; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; XFAIL: *
; RUN: opt < %s -passes='require<loops>,newgvn' -S | FileCheck -check-prefix=CHECK-PRE %s
; RUN: opt < %s -passes='require<loops>,newgvn,sccp' -S | FileCheck -check-prefix=CHECK-SCCP %s

@b = external global i32, align 4

define void @main(i1 %cond) {
; CHECK-PRE-LABEL: define void @main(
; CHECK-PRE-SAME: i1 [[COND:%.*]]) {
; CHECK-PRE-NEXT:  [[ENTRY:.*]]:
; CHECK-PRE-NEXT:    store i32 0, ptr @b, align 4
; CHECK-PRE-NEXT:    br label %[[WHILE_BODY3:.*]]
; CHECK-PRE:       [[WHILE_COND_LOOPEXIT_LOOPEXIT:.*]]:
; CHECK-PRE-NEXT:    ret void
; CHECK-PRE:       [[WHILE_BODY3]]:
; CHECK-PRE-NEXT:    [[TMP0:%.*]] = phi i32 [ [[TMP1:%.*]], %[[IF_END:.*]] ], [ 0, %[[ENTRY]] ]
; CHECK-PRE-NEXT:    [[TOBOOL4_NOT:%.*]] = icmp eq i32 [[TMP0]], 0
; CHECK-PRE-NEXT:    br i1 [[TOBOOL4_NOT]], label %[[IF_END]], label %[[IF_THEN:.*]]
; CHECK-PRE:       [[IF_THEN]]:
; CHECK-PRE-NEXT:    tail call void @foo()
; CHECK-PRE-NEXT:    [[DOTPRE:%.*]] = load i32, ptr @b, align 4
; CHECK-PRE-NEXT:    br label %[[IF_END]]
; CHECK-PRE:       [[IF_END]]:
; CHECK-PRE-NEXT:    [[TMP1]] = phi i32 [ [[DOTPRE]], %[[IF_THEN]] ], [ 0, %[[WHILE_BODY3]] ]
; CHECK-PRE-NEXT:    br i1 [[COND]], label %[[WHILE_COND_LOOPEXIT_LOOPEXIT]], label %[[WHILE_BODY3]]
;
; CHECK-SCCP-LABEL: define void @main(
; CHECK-SCCP-SAME: i1 [[COND:%.*]]) {
; CHECK-SCCP-NEXT:  [[ENTRY:.*:]]
; CHECK-SCCP-NEXT:    store i32 0, ptr @b, align 4
; CHECK-SCCP-NEXT:    br label %[[WHILE_BODY3:.*]]
; CHECK-SCCP:       [[WHILE_COND_LOOPEXIT_LOOPEXIT:.*]]:
; CHECK-SCCP-NEXT:    ret void
; CHECK-SCCP:       [[WHILE_BODY3]]:
; CHECK-SCCP-NEXT:    br label %[[IF_END:.*]]
; CHECK-SCCP:       [[IF_END]]:
; CHECK-SCCP-NEXT:    br i1 [[COND]], label %[[WHILE_COND_LOOPEXIT_LOOPEXIT]], label %[[WHILE_BODY3]]
;
entry:
  store i32 0, ptr @b
  br label %while.body3.lr.ph

while.cond.loopexit.loopexit:                     ; preds = %if.end
  ret void

while.body3.lr.ph:                                ; preds = %while.cond1.preheader
  %0 = load i32, ptr @b, align 4
  %1 = icmp eq i32 %0, 0
  br label %while.body3

while.body3:                                      ; preds = %if.end, %while.body3.lr.ph
  %2 = load i32, ptr @b, align 4
  %tobool4.not = icmp eq i32 %2, 0
  br i1 %tobool4.not, label %if.end, label %if.then

if.then:                                          ; preds = %while.body3
  tail call void @foo()
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body3
  br i1 %cond, label %while.cond.loopexit.loopexit, label %while.body3
}

declare void @foo()

