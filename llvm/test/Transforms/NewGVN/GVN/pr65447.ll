; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=newgvn < %s | FileCheck %s

; Make sure deduplicated phi nodes are removed from the VN map.
define i64 @f2(ptr %arg) {
; CHECK-LABEL: define i64 @f2(
; CHECK-SAME: ptr [[ARG:%.*]]) {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    store i1 false, ptr [[ARG]], align 1
; CHECK-NEXT:    br label %[[BB2D:.*]]
; CHECK:       [[BB2A:.*:]]
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2B:.*]]
; CHECK:       [[BB2B]]:
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2C:.*]]
; CHECK:       [[BB2C]]:
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2D]]
; CHECK:       [[BB2D]]:
; CHECK-NEXT:    br i1 false, label %[[BB2C]], label %[[BB1E:.*]]
; CHECK:       [[BB1E]]:
; CHECK-NEXT:    br i1 false, label %[[BB2F:.*]], label %[[BB4:.*]]
; CHECK:       [[BB2F]]:
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2B]]
; CHECK:       [[BB4]]:
; CHECK-NEXT:    br label %[[BB4]]
;
BB:
  store i1 false, ptr %arg, align 1
  br label %BB2d

BB2a: ; No predecessors!
  br label %BB2b

BB2b:       ; preds = %BB2f, %BB2a
  br label %BB2c

BB2c:                     ; preds = %BB2d, %BB2b
  %0 = phi i1 [ true, %BB2b ], [ %1, %BB2d ]
  br label %BB2d

BB2d:                              ; preds = %BB2c, %BB
  %1 = phi i1 [ %0, %BB2c ], [ false, %BB ]
  %2 = sext i1 %1 to i64
  %gep2 = getelementptr i1, ptr %arg, i64 %2
  %L93 = load i1, ptr %gep2, align 1
  %Az = load i1, ptr %arg, align 2
  store i1 %1, ptr %arg, align 2
  br i1 %L93, label %BB2c, label %BB1e

BB1e:                                        ; preds = %BB2d
  br i1 %Az, label %BB2f, label %BB4

BB2f:                                ; preds = %BB1e
  store i1 true, ptr %arg, align 2
  br label %BB2b

BB4:                                              ; preds = %BB1e, %BB4
  br label %BB4

; uselistorder directives
  uselistorder label %BB4, { 1, 0 }
}

; Make sure deduplicated phi nodes are removed from the VN map. Make
; sure there is no assert on attempt to use ConstantData use lists.
define i64 @f_null() {
; CHECK-LABEL: define i64 @f_null() {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    store i1 false, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2D:.*]]
; CHECK:       [[BB2A:.*:]]
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2B:.*]]
; CHECK:       [[BB2B]]:
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2C:.*]]
; CHECK:       [[BB2C]]:
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2D]]
; CHECK:       [[BB2D]]:
; CHECK-NEXT:    br i1 false, label %[[BB2C]], label %[[BB1E:.*]]
; CHECK:       [[BB1E]]:
; CHECK-NEXT:    br i1 false, label %[[BB2F:.*]], label %[[BB4:.*]]
; CHECK:       [[BB2F]]:
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    br label %[[BB2B]]
; CHECK:       [[BB4]]:
; CHECK-NEXT:    br label %[[BB4]]
;
BB:
  store i1 false, ptr null, align 1
  br label %BB2d

BB2a: ; No predecessors!
  br label %BB2b

BB2b:       ; preds = %BB2f, %BB2a
  br label %BB2c

BB2c:                     ; preds = %BB2d, %BB2b
  %0 = phi i1 [ true, %BB2b ], [ %1, %BB2d ]
  br label %BB2d

BB2d:                              ; preds = %BB2c, %BB
  %1 = phi i1 [ %0, %BB2c ], [ false, %BB ]
  %2 = sext i1 %1 to i64
  %gep2 = getelementptr i1, ptr null, i64 %2
  %L93 = load i1, ptr %gep2, align 1
  %Az = load i1, ptr null, align 2
  store i1 %1, ptr null, align 2
  br i1 %L93, label %BB2c, label %BB1e

BB1e:                                        ; preds = %BB2d
  br i1 %Az, label %BB2f, label %BB4

BB2f:                                ; preds = %BB1e
  store i1 true, ptr null, align 2
  br label %BB2b

BB4:                                              ; preds = %BB1e, %BB4
  br label %BB4

; uselistorder directives
  uselistorder label %BB4, { 1, 0 }
}
