; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes='require<loops>,newgvn' -S | FileCheck %s
; This test is checking that (a) this doesn't crash, and (b) we don't
; conclude the value of %tmp17 is available in bb1.bb15_crit_edge.
; rdar://9429882

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
define i1 @rb_intern(ptr %foo) nounwind ssp {
; CHECK-LABEL: define i1 @rb_intern(
; CHECK-SAME: ptr [[FOO:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr null, ptr [[TMP]], align 8
; CHECK-NEXT:    store i8 undef, ptr null, align 536870912
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    br i1 undef, label %[[BB3:.*]], label %[[BB1_BB15_CRIT_EDGE:.*]]
; CHECK:       [[BB1_BB15_CRIT_EDGE]]:
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP]], align 8
; CHECK-NEXT:    [[TMP17_PRE:%.*]] = load i8, ptr [[TMP11]], align 1
; CHECK-NEXT:    br label %[[BB15:.*]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    call void @isalnum()
; CHECK-NEXT:    br i1 undef, label %[[BB3_BB10_CRIT_EDGE:.*]], label %[[BB5:.*]]
; CHECK:       [[BB3_BB10_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[BB10:.*]]
; CHECK:       [[BB5]]:
; CHECK-NEXT:    br i1 undef, label %[[BB5_BB10_CRIT_EDGE:.*]], label %[[BB6:.*]]
; CHECK:       [[BB5_BB10_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[BB10]]
; CHECK:       [[BB6]]:
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP]], align 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP7]], align 1
; CHECK-NEXT:    br i1 undef, label %[[BB6_BB15_CRIT_EDGE:.*]], label %[[BB6_BB10_CRIT_EDGE:.*]]
; CHECK:       [[BB6_BB10_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[BB10]]
; CHECK:       [[BB6_BB15_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[BB15]]
; CHECK:       [[BB10]]:
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds i8, ptr [[FOO]], i64 undef
; CHECK-NEXT:    store ptr [[TMP14]], ptr [[TMP]], align 8
; CHECK-NEXT:    br label %[[BB1]]
; CHECK:       [[BB15]]:
; CHECK-NEXT:    [[PHIOFOPS9:%.*]] = phi ptr [ [[TMP11]], %[[BB1_BB15_CRIT_EDGE]] ], [ [[TMP7]], %[[BB6_BB15_CRIT_EDGE]] ]
; CHECK-NEXT:    [[TMP17:%.*]] = phi i8 [ [[TMP17_PRE]], %[[BB1_BB15_CRIT_EDGE]] ], [ [[TMP8]], %[[BB6_BB15_CRIT_EDGE]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = icmp eq i8 [[TMP17]], 0
; CHECK-NEXT:    ret i1 [[TMP18]]
;

bb:
  %tmp = alloca ptr, align 8
  store ptr null, ptr %tmp, align 8
  store i8 undef, ptr null, align 536870912
  br label %bb1

bb1:
  br i1 undef, label %bb3, label %bb15



bb3:
  call void @isalnum()
  br i1 undef, label %bb10, label %bb5

bb5:
  br i1 undef, label %bb10, label %bb6

bb6:
  %tmp7 = load ptr, ptr %tmp, align 8
  %tmp8 = load i8, ptr %tmp7, align 1
  %tmp9 = zext i8 %tmp8 to i64
  br i1 undef, label %bb15, label %bb10

bb10:
  %tmp11 = load ptr, ptr %tmp, align 8
  %tmp12 = load i8, ptr %tmp11, align 1
  %tmp13 = zext i8 %tmp12 to i64
  %tmp14 = getelementptr inbounds i8, ptr %foo, i64 undef
  store ptr %tmp14, ptr %tmp, align 8
  br label %bb1

bb15:
  %tmp16 = load ptr, ptr %tmp, align 8
  %tmp17 = load i8, ptr %tmp16, align 1
  %tmp18 = icmp eq i8 %tmp17, 0
  br label %bb19




bb19:                                             ; preds = %bb15
  ret i1 %tmp18
}

declare void @isalnum() nounwind inlinehint ssp
