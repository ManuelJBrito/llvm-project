; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=newgvn -S | FileCheck %s

target datalayout = "e-p:32:32:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-i64:32:32-f32:32:32-f64:32:32-v64:64:64-v128:128:128-a0:0:32-n32"

@p = external global i32

define i32 @test(i32 %n) nounwind {
; CHECK-LABEL: define i32 @test(
; CHECK-SAME: i32 [[N:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[FOR_COND:.*]]
; CHECK:       [[FOR_COND]]:
; CHECK-NEXT:    [[I_0:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INDVAR_NEXT:%.*]], %[[FOR_INC:.*]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[I_0]], [[N]]
; CHECK-NEXT:    br i1 [[CMP]], label %[[FOR_BODY:.*]], label %[[FOR_COND_FOR_END_CRIT_EDGE:.*]]
; CHECK:       [[FOR_COND_FOR_END_CRIT_EDGE]]:
; CHECK-NEXT:    [[TMP9_PRE:%.*]] = load i32, ptr @p, align 8
; CHECK-NEXT:    br label %[[FOR_END:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr @p, align 8
; CHECK-NEXT:    [[DEC:%.*]] = add i32 [[TMP3]], -1
; CHECK-NEXT:    store i32 [[DEC]], ptr @p, align 4
; CHECK-NEXT:    [[CMP6:%.*]] = icmp slt i32 [[DEC]], 0
; CHECK-NEXT:    br i1 [[CMP6]], label %[[FOR_BODY_FOR_END_CRIT_EDGE:.*]], label %[[FOR_INC]]
; CHECK:       [[FOR_BODY_FOR_END_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[FOR_END]]
; CHECK:       [[FOR_INC]]:
; CHECK-NEXT:    [[INDVAR_NEXT]] = add i32 [[I_0]], 1
; CHECK-NEXT:    br label %[[FOR_COND]]
; CHECK:       [[FOR_END]]:
; CHECK-NEXT:    [[TMP9:%.*]] = phi i32 [ [[TMP9_PRE]], %[[FOR_COND_FOR_END_CRIT_EDGE]] ], [ [[DEC]], %[[FOR_BODY_FOR_END_CRIT_EDGE]] ]
; CHECK-NEXT:    ret i32 [[TMP9]]
;
entry:
  br label %for.cond

; loads aligned greater than the memory should not be moved past conditionals

for.cond:
  %i.0 = phi i32 [ 0, %entry ], [ %indvar.next, %for.inc ]
  %cmp = icmp slt i32 %i.0, %n
  br i1 %cmp, label %for.body, label %for.cond.for.end_crit_edge

for.cond.for.end_crit_edge:
; ...but PRE can still move the load out of for.end to here.
  br label %for.end

for.body:
  %tmp3 = load i32, ptr @p, align 8
  %dec = add i32 %tmp3, -1
  store i32 %dec, ptr @p
  %cmp6 = icmp slt i32 %dec, 0
  br i1 %cmp6, label %for.body.for.end_crit_edge, label %for.inc

for.body.for.end_crit_edge:
  br label %for.end

for.inc:
  %indvar.next = add i32 %i.0, 1
  br label %for.cond

for.end:
  %tmp9 = load i32, ptr @p, align 8
  ret i32 %tmp9
}
