; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=newgvn -S < %s | FileCheck %s

define i64 @snork() {
; CHECK-LABEL: define i64 @snork() {
; CHECK-NEXT:  [[BB:.*]]:
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i64 [ 0, %[[BB]] ], [ [[ADD:%.*]], %[[BB1]] ]
; CHECK-NEXT:    [[ADD]] = add i64 [[PHI]], 1
; CHECK-NEXT:    [[ADD2:%.*]] = add i64 [[ADD]], 1
; CHECK-NEXT:    [[ICMP:%.*]] = icmp slt i64 [[ADD]], 100
; CHECK-NEXT:    br i1 [[ICMP]], label %[[BB1]], label %[[BB4:.*]]
; CHECK:       [[BB4]]:
; CHECK-NEXT:    ret i64 [[ADD2]]
;
bb:
  br label %bb1

bb1:
  %phi = phi i64 [ 0, %bb ], [ %add3, %bb1 ]
  %add = add i64 %phi, 1
  %add2 = add i64 %add, 1
  %add3 = add i64 %phi, 1
  %icmp = icmp slt i64 %add3, 100
  br i1 %icmp, label %bb1, label %bb4

bb4:
  ret i64 %add2
}

define i64 @wobble() {
; CHECK-LABEL: define i64 @wobble() {
; CHECK-NEXT:  [[BB:.*]]:
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i64 [ 0, %[[BB]] ], [ [[ADD:%.*]], %[[BB1]] ]
; CHECK-NEXT:    [[ADD]] = add i64 [[PHI]], 1
; CHECK-NEXT:    [[ADD2:%.*]] = add i64 [[ADD]], 1
; CHECK-NEXT:    [[ADD4:%.*]] = add i64 [[ADD2]], 1
; CHECK-NEXT:    [[ICMP:%.*]] = icmp slt i64 [[ADD]], 100
; CHECK-NEXT:    br i1 [[ICMP]], label %[[BB1]], label %[[BB6:.*]]
; CHECK:       [[BB6]]:
; CHECK-NEXT:    ret i64 [[ADD4]]
;
bb:
  br label %bb1

bb1:
  %phi = phi i64 [ 0, %bb ], [ %add5, %bb1 ]
  %add = add i64 %phi, 1
  %add2 = add i64 %add, 1
  %add3 = add i64 %add, 1
  %add4 = add i64 %add2, 1
  %add5 = add i64 %phi, 1
  %icmp = icmp slt i64 %add5, 100
  br i1 %icmp, label %bb1, label %bb6

bb6:
  ret i64 %add4
}

define i64 @wobble.1(i64 %arg) {
; CHECK-LABEL: define i64 @wobble.1(
; CHECK-SAME: i64 [[ARG:%.*]]) {
; CHECK-NEXT:  [[BB:.*]]:
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i64 [ 0, %[[BB]] ], [ [[ADD:%.*]], %[[BB1]] ]
; CHECK-NEXT:    [[ADD]] = add i64 [[PHI]], 1
; CHECK-NEXT:    [[ADD2:%.*]] = add i64 [[ADD]], 1
; CHECK-NEXT:    [[ICMP:%.*]] = icmp slt i64 [[ADD]], 100
; CHECK-NEXT:    br i1 [[ICMP]], label %[[BB1]], label %[[BB5:.*]]
; CHECK:       [[BB5]]:
; CHECK-NEXT:    ret i64 [[ADD2]]
;
bb:
  br label %bb1

bb1:
  %phi = phi i64 [ 0, %bb ], [ %add4, %bb1 ]
  %add = add i64 %phi, 1
  %add2 = add i64 %add, 1
  %sub = sub i64 %add2, 1
  %add3 = add i64 %sub, 1
  %add4 = add i64 %phi, 1
  %icmp = icmp slt i64 %add4, 100
  br i1 %icmp, label %bb1, label %bb5

bb5:
  ret i64 %add3
}

define i64 @pluto(i64 %arg) {
; CHECK-LABEL: define i64 @pluto(
; CHECK-SAME: i64 [[ARG:%.*]]) {
; CHECK-NEXT:  [[BB:.*]]:
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i64 [ 0, %[[BB]] ], [ [[ADD:%.*]], %[[BB1]] ]
; CHECK-NEXT:    [[ADD]] = add i64 [[PHI]], 1
; CHECK-NEXT:    [[ADD2:%.*]] = add i64 [[ADD]], 1
; CHECK-NEXT:    [[ICMP:%.*]] = icmp slt i64 [[ADD]], 100
; CHECK-NEXT:    br i1 [[ICMP]], label %[[BB1]], label %[[BB5:.*]]
; CHECK:       [[BB5]]:
; CHECK-NEXT:    ret i64 [[ADD2]]
;
bb:
  br label %bb1

bb1:
  %phi = phi i64 [ 0, %bb ], [ %add4, %bb1 ]
  %add = add i64 %phi, 1
  %add2 = add i64 %add, 1
  %sub = sub i64 %add2, 1
  %add3 = add i64 %sub, 1
  %add4 = add i64 %phi, 1
  %icmp = icmp slt i64 %add4, 100
  br i1 %icmp, label %bb1, label %bb5

bb5:
  ret i64 %add3
}
