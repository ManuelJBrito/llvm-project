; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=newgvn -S | FileCheck %s

define i32 @TypeI_1(i32 %a) {
; CHECK-LABEL: define i32 @TypeI_1(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:    [[X:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    br i1 true, label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    ret i32 [[X]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    ret i32 poison
;
  %x = add i32 %a, 1
  %cmp = icmp eq i32 %x, 10
  br i1 true, label %bb1, label %bb2
bb1:
  %z = add i32 %a, 1
  ret i32 %z
bb2:
  ret i32 poison
}

define i32 @TypeI_2(i32 %a, i1 %c) {
; CHECK-LABEL: define i32 @TypeI_2(
; CHECK-SAME: i32 [[A:%.*]], i1 [[C:%.*]]) {
; CHECK-NEXT:    br i1 [[C]], label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[Z:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    br label %[[BB3:.*]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    [[Y:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    br label %[[BB3]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    [[PHIOFOPS:%.*]] = phi i32 [ [[Y]], %[[BB2]] ], [ [[Z]], %[[BB1]] ]
; CHECK-NEXT:    ret i32 [[PHIOFOPS]]
;
  br i1 %c, label %bb1, label %bb2
bb1:
  %x = add i32 %a, 1
  %cmp1 = icmp eq i32 %x, 10
  br label %bb3
bb2:
  %y = add i32 %a, 1
  %cmp2 = icmp eq i32 %y, 10
  br label %bb3
bb3:
  %z = add i32 %a, 1
  ret i32 %z
}

define i32 @TypeII(i32 %a1, i32 %a2, i1 %c) {
; CHECK-LABEL: define i32 @TypeII(
; CHECK-SAME: i32 [[A1:%.*]], i32 [[A2:%.*]], i1 [[C:%.*]]) {
; CHECK-NEXT:    br i1 [[C]], label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[X:%.*]] = add i32 [[A1]], 1
; CHECK-NEXT:    br label %[[BB3:.*]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    [[Y:%.*]] = add i32 [[A2]], 1
; CHECK-NEXT:    br label %[[BB3]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    [[PHIOFOPS:%.*]] = phi i32 [ [[Y]], %[[BB2]] ], [ [[X]], %[[BB1]] ]
; CHECK-NEXT:    [[A:%.*]] = phi i32 [ [[A1]], %[[BB1]] ], [ [[A2]], %[[BB2]] ]
; CHECK-NEXT:    ret i32 [[PHIOFOPS]]
;
  br i1 %c, label %bb1, label %bb2
bb1:
  %x = add i32 %a1, 1
  %cmp1 = icmp eq i32 %x, 10
  br label %bb3
bb2:
  %y = add i32 %a2, 1
  %cmp2 = icmp eq i32 %y, 10
  br label %bb3
bb3:
  %a = phi i32 [%a1, %bb1], [%a2, %bb2]
  %z = add i32 %a, 1
  ret i32 %z
}
define i32 @TypeIII(i32 %a, i1 %c) {
; CHECK-LABEL: define i32 @TypeIII(
; CHECK-SAME: i32 [[A:%.*]], i1 [[C:%.*]]) {
; CHECK-NEXT:    br i1 [[C]], label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[Z:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    br label %[[BB3:.*]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    [[Z_PRE:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    br label %[[BB3]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    [[PHIOFOPS:%.*]] = phi i32 [ [[Z_PRE]], %[[BB2]] ], [ [[Z]], %[[BB1]] ]
; CHECK-NEXT:    ret i32 [[PHIOFOPS]]
;
  br i1 %c, label %bb1, label %bb2
bb1:
  %x = add i32 %a, 1
  %cmp1 = icmp eq i32 %x, 10
  br label %bb3
bb2:
  br label %bb3
bb3:
  %z = add i32 %a, 1
  ret i32 %z
}

define i32 @TypeIV_1(i32 %a1, i32 %a2, i1 %c) {
; CHECK-LABEL: define i32 @TypeIV_1(
; CHECK-SAME: i32 [[A1:%.*]], i32 [[A2:%.*]], i1 [[C:%.*]]) {
; CHECK-NEXT:    br i1 [[C]], label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[X:%.*]] = add i32 [[A1]], 1
; CHECK-NEXT:    br label %[[BB3:.*]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    [[Z_PRE:%.*]] = add i32 [[A2]], 1
; CHECK-NEXT:    br label %[[BB3]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    [[PHIOFOPS:%.*]] = phi i32 [ [[Z_PRE]], %[[BB2]] ], [ [[X]], %[[BB1]] ]
; CHECK-NEXT:    [[A:%.*]] = phi i32 [ [[A1]], %[[BB1]] ], [ [[A2]], %[[BB2]] ]
; CHECK-NEXT:    ret i32 [[PHIOFOPS]]
;
  br i1 %c, label %bb1, label %bb2
bb1:
  %x = add i32 %a1, 1
  %cmp1 = icmp eq i32 %x, 10
  br label %bb3
bb2:
  br label %bb3
bb3:
  %a = phi i32 [%a1, %bb1], [%a2, %bb2]
  %z = add i32 %a, 1
  ret i32 %z
}

define i32 @TypeV(i32 %a) {
; CHECK-LABEL: define i32 @TypeV(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:    [[B:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    [[C:%.*]] = add i32 [[B]], 2
; CHECK-NEXT:    br i1 true, label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    ret i32 [[C]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    store i8 poison, ptr null, align 1
; CHECK-NEXT:    ret i32 poison
;
  %b = add i32 %a, 1
  %c = add i32 %b, 2
  %cmp1 = icmp eq i32 %c, 10
  br i1 true, label %bb1, label %bb2
bb1:
  %b1 = add i32 %a, 1
  %c1 = add i32 %b1, 2
  ret i32 %c1
bb2:
  ret i32 poison
}

define i32 @TypeVI(i32 %a1, i32 %a2, i1 %cond) {
; CHECK-LABEL: define i32 @TypeVI(
; CHECK-SAME: i32 [[A1:%.*]], i32 [[A2:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:    br i1 [[COND]], label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[B1:%.*]] = add i32 [[A1]], 1
; CHECK-NEXT:    [[C1:%.*]] = add i32 [[B1]], 2
; CHECK-NEXT:    br label %[[BB3:.*]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    [[B2:%.*]] = add i32 [[A2]], 1
; CHECK-NEXT:    [[C2:%.*]] = add i32 [[B2]], 2
; CHECK-NEXT:    br label %[[BB3]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    [[PHIOFOPS1:%.*]] = phi i32 [ [[B2]], %[[BB2]] ], [ [[B1]], %[[BB1]] ]
; CHECK-NEXT:    [[PHIOFOPS:%.*]] = phi i32 [ [[C2]], %[[BB2]] ], [ [[C1]], %[[BB1]] ]
; CHECK-NEXT:    [[A:%.*]] = phi i32 [ [[A1]], %[[BB1]] ], [ [[A2]], %[[BB2]] ]
; CHECK-NEXT:    ret i32 [[PHIOFOPS]]
;
  br i1 %cond, label %bb1, label %bb2
bb1:
  %b1 = add i32 %a1, 1
  %c1 = add i32 %b1, 2
  %cmp1 = icmp eq i32 %c1, 10
  br label %bb3
bb2:
  %b2 = add i32 %a2, 1
  %c2 = add i32 %b2, 2
  %cmp2 = icmp eq i32 %c2, 10
  br label %bb3
bb3:
  %a = phi i32 [%a1, %bb1], [%a2, %bb2]
  %b = add i32 %a, 1
  %c = add i32 %b, 2
  ret i32 %c
}

define i32 @TypeVII_1(i32 %a, i1 %cond) {
; CHECK-LABEL: define i32 @TypeVII_1(
; CHECK-SAME: i32 [[A:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:    br i1 [[COND]], label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[B1:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    [[C1:%.*]] = add i32 [[B1]], 2
; CHECK-NEXT:    br label %[[BB3:.*]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    [[B1_PRE:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    [[C1_PRE:%.*]] = add i32 [[B1_PRE]], 2
; CHECK-NEXT:    br label %[[BB3]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    [[PHIOFOPS1:%.*]] = phi i32 [ [[B1_PRE]], %[[BB2]] ], [ [[B1]], %[[BB1]] ]
; CHECK-NEXT:    [[PHIOFOPS:%.*]] = phi i32 [ [[C1_PRE]], %[[BB2]] ], [ [[C1]], %[[BB1]] ]
; CHECK-NEXT:    ret i32 [[PHIOFOPS]]
;
  br i1 %cond, label %bb1, label %bb2
bb1:
  %b = add i32 %a, 1
  %c = add i32 %b, 2
  %cmp1 = icmp eq i32 %c, 10
  br label %bb3
bb2:
  br label %bb3
bb3:
  %b1 = add i32 %a, 1
  %c1 = add i32 %b1, 2
  ret i32 %c1
}

define i32 @TypeVII_2(i32 %a, i1 %cond) {
; CHECK-LABEL: define i32 @TypeVII_2(
; CHECK-SAME: i32 [[A:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:    [[B_PRE:%.*]] = add i32 [[A]], 1
; CHECK-NEXT:    [[C_PRE:%.*]] = add i32 [[B_PRE]], 2
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[CMP1:%.*]] = call i1 @cond(i32 [[C_PRE]])
; CHECK-NEXT:    br i1 [[CMP1]], label %[[BB1_BB1_CRIT_EDGE:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1_BB1_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[BB1]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    ret i32 [[C_PRE]]
;
  br label %bb1
bb1:
  %b = add i32 %a, 1
  %c = add i32 %b, 2
  %cmp1 = call i1 @cond(i32 %c)
  br i1 %cmp1 ,label %bb1, label %bb2
bb2:
  ret i32 %c
}

declare i1 @cond(i32)

define i32 @TypeVIII(i32 %a1, i32 %a2, i1 %cond) {
; CHECK-LABEL: define i32 @TypeVIII(
; CHECK-SAME: i32 [[A1:%.*]], i32 [[A2:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:    br i1 [[COND]], label %[[BB1:.*]], label %[[BB2:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[B1:%.*]] = add i32 [[A1]], 1
; CHECK-NEXT:    [[C1:%.*]] = add i32 [[B1]], 2
; CHECK-NEXT:    br label %[[BB3:.*]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    [[B_PRE:%.*]] = add i32 [[A2]], 1
; CHECK-NEXT:    [[C_PRE:%.*]] = add i32 [[B_PRE]], 2
; CHECK-NEXT:    br label %[[BB3]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    [[PHIOFOPS1:%.*]] = phi i32 [ [[B_PRE]], %[[BB2]] ], [ [[B1]], %[[BB1]] ]
; CHECK-NEXT:    [[PHIOFOPS:%.*]] = phi i32 [ [[C_PRE]], %[[BB2]] ], [ [[C1]], %[[BB1]] ]
; CHECK-NEXT:    [[A:%.*]] = phi i32 [ [[A1]], %[[BB1]] ], [ [[A2]], %[[BB2]] ]
; CHECK-NEXT:    ret i32 [[PHIOFOPS]]
;
  br i1 %cond, label %bb1, label %bb2
bb1:
  %b1 = add i32 %a1, 1
  %c1 = add i32 %b1, 2
  %cmp1 = icmp eq i32 %c1, 10
  br label %bb3
bb2:
  br label %bb3
bb3:
  %a = phi i32 [%a1, %bb1], [%a2, %bb2]
  %b = add i32 %a, 1
  %c = add i32 %b, 2
  ret i32 %c
}
